@page "/color-details"

@using System.Drawing
@using System.Linq
@using BApp.Components.Utils
@using BApp.Services.Interfaces
@using ColorName

@inject IColorService ColorService
@inject IJSRuntime _jsRuntime

<div class="color-extension">
    @if (!string.IsNullOrEmpty(ColorHex))
    {
        <div class="color-details">
            <h2 class="color-name">@ColorNameProvider.GetColorNameFromHex(ColorHex).colorName</h2>
            <p class="color-rgb">@_rgb</p>

            <div class="color-bars">
                <div>
                    <h3>Shades</h3>
                    <div class="color-bar">
                        @for (int i = 0; i < 9; i++)
                        {
                            var color = i < _shades.Count ? _shades[i] : "#e0e0e0";
                            <div class="color-block" style="background-color: @color" @onclick="() => OnColorClicked(color)">
                                <span class="color-hex">@color</span>
                            </div>
                        }
                    </div>
                </div>

                <div>
                    <h3>Tints</h3>
                    <div class="color-bar">
                        @for (int i = 0; i < 9; i++)
                        {
                            var color = i < _tints.Count ? _tints[i] : "#e0e0e0";
                            <div class="color-block" style="background-color: @color" @onclick="() => OnColorClicked(color)">
                                <span class="color-hex">@color</span>
                            </div>
                        }
                    </div>
                </div>

                <div>
                    <h3>Tones</h3>
                    <div class="color-bar">
                        @for (int i = 0; i < 9; i++)
                        {
                            var color = i < _tints.Count ? _tones[i] : "#e0e0e0";
                            <div class="color-block" style="background-color: @color" @onclick="() => OnColorClicked(color)">
                                <span class="color-hex">@color</span>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<CustomToast @ref="toast" Title="Success!" Message="Color hex copied to clipboard!" />


@code {
    [Parameter]
    public string ColorHex { get; set; }

    private int _shadeCount { get; set; } = 9;
    private string _rgb { get; set; }
    private string selectedValueType { get; set; } = "hex";
    private string selectedColorValue { get; set; }

    private Color _color { get; set; }

    private List<string> _shades { get; set; } = new List<string>();
    private List<string> _tints { get; set; } = new List<string>();
    private List<string> _tones { get; set; } = new List<string>();

    private CustomToast toast;

    protected override async Task OnInitializedAsync()
    {
        await LoadColors();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadColors();
    }

    private async Task OnShadeCountChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int newCount))
        {
            _shadeCount = newCount;
            await LoadColors();
        }
    }

    private async Task LoadColors()
    {
        _color = ColorTranslator.FromHtml(ColorHex);
        _rgb = $"RGB: ({_color.R}, {_color.G}, {_color.B})";

        _shades = await ColorService.GenerateShades(ColorHex, _shadeCount);
        _tints = await ColorService.GenerateTints(ColorHex, _shadeCount);
        _tones = await ColorService.GenerateTones(ColorHex, _shadeCount);
    }

    private async Task OnColorClicked(string colorHex)
    {
        if (!string.IsNullOrEmpty(colorHex) && colorHex != "#e0e0e0")
        {
            await _jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", colorHex);
            toast.ShowToast();

        }
        else
        {
            selectedColorValue = "No valid color selected.";
        }
    }
}
