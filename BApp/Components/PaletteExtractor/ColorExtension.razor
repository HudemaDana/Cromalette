@page "/color-details"
@using System.Drawing
@using System.Linq
@using BApp.Services.Interfaces
@using ColorName

@inject IColorService ColorService

<div class="color-extension">
    @if (!string.IsNullOrEmpty(ColorHex))
    {
        <h2>@ColorNameProvider.GetColorNameFromHex(ColorHex).colorName</h2>
        <p>@_rgb</p>

        <div>
            <label for="shadeCount">Number of Shades/Tints:</label>
            <select id="shadeCount" @onchange="OnShadeCountChanged">
                @for (int i = 5; i <= 10; i++)
                {
                    <option value="@i">@i</option>
                }
            </select>
        </div>

        <div>
            <label for="valueType">Value Type:</label>
            <select id="valueType" @bind="selectedValueType">
                <option value="hex">Hex</option>
                <option value="rgb">RGB</option>
                <option value="hsv">HSV</option>
            </select>
        </div>

        <div>
            <h3>Shades</h3>
            <div class="color-bar">
                @for (int i = 0; i < 10; i++)
                {
                    var color = i < _shades.Count ? _shades[i] : "#e0e0e0";
                    <div class="color-block" style="background-color: @color" @onclick="() => OnColorClicked(color)" />
                }
            </div>
        </div>

        <div>
            <h3>Tints</h3>
            <div class="color-bar">
                @for (int i = 0; i < 10; i++)
                {
                    var color = i < _tints.Count ? _tints[i] : "#e0e0e0";
                    <div class="color-block" style="background-color: @color" @onclick="() => OnColorClicked(color)" />
                }
            </div>
        </div>

        <div>
            <h3>Selected Color Value</h3>
            <p>@selectedColorValue</p>
        </div>
    }
</div>

@code {
    [Parameter]
    public string ColorHex { get; set; }

    private int _shadeCount { get; set; } = 5;
    private string _rgb { get; set; }
    private string selectedValueType { get; set; } = "hex";
    private string selectedColorValue { get; set; }

    private Color _color { get; set; }

    private List<string> _shades { get; set; } = new List<string>();
    private List<string> _tints { get; set; } = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        await LoadColors();
    }

    private async Task OnShadeCountChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int newCount))
        {
            _shadeCount = newCount;
            await LoadColors();
        }
    }

    private async Task LoadColors()
    {
        _color = ColorTranslator.FromHtml(ColorHex);
        _rgb = $"RGB: ({_color.R}, {_color.G}, {_color.B})";

        _shades = await ColorService.GenerateShades(ColorHex, _shadeCount);
        _tints = await ColorService.GenerateTints(ColorHex, _shadeCount);
    }

    private void OnColorClicked(string colorHex)
    {
        if (!string.IsNullOrEmpty(colorHex) && colorHex != "#e0e0e0")
        {
            var color = ColorTranslator.FromHtml(colorHex);
            selectedColorValue = selectedValueType switch
            {
                "rgb" => $"RGB: ({color.R}, {color.G}, {color.B})",
                "hsv" => $"HSV: ({color.GetHue()}, {color.GetSaturation() * 100}%, {color.GetBrightness() * 100}%)",
                _ => colorHex,
            };
        }
        else
        {
            selectedColorValue = "No valid color selected.";
        }
    }

    private void OnValueTypeChanged()
    {
       
    }
}
