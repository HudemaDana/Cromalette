@page "/counter"

@using BApp.Components.Utils
@using BApp.Domain.Models
@using BApp.Services.Interfaces
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Authorization
@using System.IdentityModel.Tokens.Jwt

@inject IUserColorService UserColorService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authStateProvider
@inject ILocalStorageService LocalStorage

<div class="container">

    <div class="list-container">
        <div class="card">
            <div class="row">
                @foreach (var userColor in _userColorList)
                {
                    <div class="col-md-3 mb-5 py-3">
                        <ListItem Color="@userColor" OnClick="ShowColorDetails" />
                    </div>
                }
            </div>
        </div>
    </div>

    <DetailsModal UserColor="SelectedItem" IsVisible="isModalVisible" OnClose="CloseModal" />

</div>

@code {

    private bool isModalVisible { get; set; } = false;
    private int _userId { get; set; }
    private UserColor SelectedItem { get; set; } = new UserColor();
    private List<UserColor> _userColorList { get; set; } = new List<UserColor>();

    protected override async Task OnInitializedAsync()
    {
        var token = await LocalStorage.GetItemAsync<string>("token");
        if (token != null)
        {
            await authStateProvider.GetAuthenticationStateAsync();
            var jwt = new JwtSecurityTokenHandler().ReadJwtToken(token);
            _userId = int.Parse(jwt.Claims.First(c => c.Type == "Id").Value);
        }
        await GetUserColors();
    }

    private async Task GetUserColors()
    {
        _userColorList = await UserColorService.GetUserColorsByUserId(_userId);
    }


    private void CloseModal()
    {
        isModalVisible = false;
    }

    private void ShowColorDetails(UserColor color)
    {

        if (color != null)
        {
            SelectedItem = color;
            isModalVisible = true;
        }
    }
}
